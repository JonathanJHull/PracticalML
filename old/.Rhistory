head(training)
load.packages("kernlab")
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
head(spam)
typeof(training)
head(training)
preProcess(tr,method="pca",thresh=0.8)
head(tr)
preProcess(tr,method="pca",thresh=0.8,outcome=diagnosis)
preProcess(tr,method="pca",thresh=0.8,outcome="diagnosis")
ncols(spam)
ncol(spam)
preProcess(tr[,-1],method="pca",thresh=0.8,outcome="diagnosis")
preProcess(tr[,-1],method="pca",thresh=0.8)
modelAll <- train(tr$diagnosis~.,method="glm",data=tr)
install.packages("e1071")
library(e1071)
modelAll <- train(tr$diagnosis~.,method="glm",data=tr)
modelPca <- train(tr$diagnosis~.,method="glm",preProcess="pca",data=tr)
prePCA <- preProcess(tr[,-1],method="pca",thresh=0.8)
trainPCA <- predict(prePCA,tr[,-1])
modelPCA <- train(tr$diagnosis~.,method="glm",data=tr)
head(testing)
modelPCA <- train(tr$diagnosis~.,method="glm",data=tr)
testPCA<-predict(prePCA,test[,-1])
testPCA<-predict(prePCA,testing[,-1])
test <-testing[,c(1,grep("^IL",colnames(training)))]
testPCA<-predict(prePCA,test[,-1])
confusionMatrix(test$diagnosis,predict(modelPCA,testPCA))
head(test)
head(test$diagnosis)
predict(modelPCA,testPCA)
modelPCA
testPCA
predict(modelPCA,test)
confusionMatrix(test$diagnosis,predict(modelPCA,test))
prePCA <- preProcess(tr[,-1],method="pca",thresh=0.8)
confusionMatrix(test$diagnosis,predict(modelPCA,test))
modelPCA <- train(tr$diagnosis~.,method="glm",data=trainPCA)
modelAll <- train(tr$diagnosis~.,method="glm",data=tr)
nrows(trainPCA)
nrow(trainPCA)
nrow(tr)
nrow(testPCA)
confusionMatrix(test$diagnosis,predict(modelAll,test))
confusionMatrix(test$diagnosis,predict(modelPCA,test))
confusionMatrix(test$diagnosis,predict(modelPCA,testPCA))
confusionMatrix(test$diagnosis,predict(modelAll,test))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(y=training$CompressiveStrength,colour=cut2(FlyAsh,g=4),data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr
preProcess(tr[,-1],method="pca",thresh=0.9)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
head(segmentationOriginal)
?subset()
train <- subset(segmentationOriginal,case=="Train")
typeof(segmentationOriginal)
df <- data.frame(segmentationOriginal)
train <- subset(segmentationOriginal,case=="Train")
typeof(segmentationOriginal)
train <- segmentationOriginal[case=="Train"]
train <- subset(segmentationOriginal,Case=="Train")
nrow(train)
test <- subset(segmentationOriginal,Case=="Test")
~train()
?train()
set.seed(125)
modFit <- train(Class~.,method="rpart",data=training)
head(training,2)
head(train,2)
modFit <- train(Class~.,method="rpart",data=train)
print(modFit$finalModel)
pot(modFit$finalModel,uniform=TRUE)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(rattle)
add.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olive
head(olive)
nrow(olive)
modFit <- train(Area~.,method="rpart",data=olive)
?train()
names(getModelInfo())
modFit <- train(Area~.,method="ctree",data=olive)
modFit <- train(Area~.,method="ctree",data=olive)
?tree()
~predict()
?predict()
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
nrow(newdata)
predict(modFit,newdata)
predict(modFit,newdata=newdata
)
names(getModelInfo())
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
newdata
modFit <- train(Area~.,method="tree",data=olive)
install.packages("tree")
modFit <- train(Area~.,method="tree",data=olive)
modFit <- train(Area~.,method="ctree",data=olive)
predict(modFit,newdata=newdata)
?predict()
tree()
olive$Area = factor(olive$Area)
modFit <- train(Area~.,method="rpart",data=olive)
predict(modFit,newdata=newdata)
newdata
head(olive)
modFit
modFit <- train(Area~.,method="ctree",data=olive)
predict(modFit,newdata=newdata)
for(fn in methods("predict"))
try({
f <- eval(substitute(getAnywhere(fn)$objs[[1]], list(fn = fn)))
cat(fn, ":\n\t", deparse(args(f)), "\n")
}, silent = TRUE)
predict(modFit,newdata=newdata)
modFit
predict(modFit,newdata)
newdata
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
tree()
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
newdata = as.data.frame(t(colMeans(olive))
)
newdata
olive$Area = factor(olive$Area)
newdata = as.data.frame(t(colMeans(olive))
)
?tree()
add.packages("tree")
install.packages("tree")
library(tree)
tr <- tree(Area~., olive)
tr
predict(tr,newdata)
predict(tr,newdata=newdata
)
predict(tr,newdata=newdata)
tr <- tree(Area~., olive)
newdata
predict(tr,newdata=newdata,type="class")
install.packages("tree")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?train()
names(getModelInfo())
head(train)
head(trainSA)
glm()
mylogit <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl)
mylogit <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,data="trainSA", family="binomial")
mylogit <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA, family="binomial")
summary(mylogit)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(mylogit, trainSA)
missClass(predict(mylogit, trainSA))
train
missClass(predict(mylogit, trainSA),train)
missClass(train,predict(mylogit, trainSA))
predict(mylogit, head(trainSA))
head(train)
?predict()
predict(mylogit, head(trainSA), type="response")
summary(mylogit)
head(trainSA)
head(trainSA$chd)
predict(mylogit, head(trainSA), type="response")
predict(mylogit, head(trainSA), type="response")[2]
predict(mylogit, head(trainSA), type="response")[2,]
predict(mylogit, head(trainSA), type="response")[,2]
predict(mylogit, head(trainSA), type="response")[,1]
typeof(predict(mylogit, head(trainSA), type="response"))
predict(mylogit, head(trainSA), type="response")
?double()
l<-predict(mylogit, head(trainSA), type="response")
l[1]
typeof(l[1])
df <- data.frame(l)
typeof(df)
head(df)
df[,2]
df[,1]
p <- data.frame(predict(mylogit, head(trainSA), type="response"))[,1]
p
p <- data.frame(predict(mylogit, trainSA, type="response"))[,1]
dec <- trainSA$chd
missClass(dec,p)
p <- data.frame(predict(mylogit, testSA, type="response"))[,1]
dec <- testSA$chd
missClass(dec,p)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
library(randomForest)
install.packages("randomForest")
library(randomForest)
rf <- randomForest(y~.,data=vowel.train")
)
))))
rf <- randomForest(y~.,data=vowel.train)
))))
))))))))))))))))
))))))))))))))))))))))))))))))))
""
rf <- randomForest(y~.,data=vowel.train)
?varImp()
varImp(rf)
install.packages("varImp")
install.packages("caret")
install.packages("caret")
library(caret)
varImp(rf)
sort(varImp(rf))
sort(varImp(rf)$Overall)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
tr <- tree(Area~.,olive)
library(tree)
tr <- tree(Area~.,olive)
predict(tr,newdata=newdata)
summary(tr)
tr
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
accuracy = function(values,prediction){print(length(values)); print(length(prediction)); sum(prediction == values)/length(values)}
agree_accuracy = function(v1,v2,prediction){print(length(v1)); print(length(v2));print(length(prediction)); print(sum((v1 == v2) & (v1 == prediction))/sum(v1==v2));}
rf <- train(y~.,data=vowel.train,"rf")
install.packages("caret")
library(caret)
rf <- train(y~.,data=vowel.train,"rf")
r1<-predict(rf,newdata=vowel.test)
gbm<-train(y~.,data=vowel.train,"gbm",verbose=FALSE)
gbm<-train(y~.,data=vowel.train,"gbm",verbose=FALSE)
g1 <- predict(gbm,newdata=vowel.train)
accuracy(r1,vowel.test$y)
accuracy(g11,vowel.test$y)
accuracy(g1,vowel.test$y)
set.seed(33833)
rf <- train(y~.,data=vowel.train,"rf")
r1<-predict(rf,newdata=vowel.test)
gbm<-train(y~.,data=vowel.train,"gbm",verbose=FALSE)
g1 <- predict(gbm,newdata=vowel.train)
accuracy(r1,vowel.test$y)
accuracy(g1,vowel.test$y)
head(g1)
tail(g1)
g1 <- predict(gbm,newdata=vowel.test)
accuracy(g1,vowel.test$y)
gbm<-train(y~.,data=vowel.train,"gbm",verbose=FALSE)
g1 <- predict(gbm,newdata=vowel.test)
accuracy(g1,vowel.test$y)
agree_accuracy(r1,g1,vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rf <- train(diagnosis~.,data=training,"rf")
r1<-predict(rf,newdata=vowel.test)
r1<-predict(rf,newdata=testing)
gbm<-train(diagnosis~.,data=training,"gbm",verbose=FALSE)
set.seed(62433)
rf <- train(diagnosis~.,data=training,"rf")
r1<-predict(rf,newdata=testing)
gbm<-train(diagnosis~.,data=training,"gbm",verbose=FALSE)
g1<-predict(gbm,newdata=testing)
lda<-train(diagnosis~.,data=training,"lda",verbose=FALSE)
l1<-predict(lda,newdata=testing)
accuracy(r1,testing$diagnosis)
accuracy(g1,testing$diagnosis)
accuracy(l1,testing$diagnosis)
predDF <- data.frame(r1,g1,l1,testing$diagnosis)
combModFit <- train(diagnosis~.,method="gam",data=predDF)
predDF <- data.frame(r1,g1,l1,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
head(combPred)
nrow(combPred)
nrows(combPred)
combPred
combPred
accuracy(combPred,testing$diagnosis)
testing$diagnosis
predDf
predDF
combModFit
accuracy(combPred,testing$diagnosis)
accuracy()
combPred <- predict(combModFit,testing)
accuracy(combPred,testing$diagnosis)
testing
head(combPred)
accuracy(combPred,testing$diagnosis)
combPred
testing$diagnosis
head(testing)
testing$diagnosis
r1
g1
l1
head(predDF)
combModFit <- train(diagnosis~., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
combPred
print(combModFit)
combModFit <- train(diagnosis~., method="rf", data=predDF)
combPred <- predict(combModFit, predDF)
combPred
accuracy(combPred,testing$diagnosis)
combModFit <- train(diagnosis~., method="rf", data=predDF)
combPred <- predict(combModFit, predDF)
accuracy(combPred,testing$diagnosis)
set.seed(3433)
set.seed(62433
)
rf <- train(diagnosis~.,data=training,"rf")
r1<-predict(rf,newdata=testing)
gbm<-train(diagnosis~.,data=training,"gbm",verbose=FALSE)
g1<-predict(gbm,newdata=testing)
lda<-train(diagnosis~.,data=training,"lda",verbose=FALSE)
l1<-predict(lda,newdata=testing)
predDF <- data.frame(r1,g1,l1,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis~., method="rf", data=predDF)
combPred <- predict(combModFit, predDF)
accuracy(combPred,testing$diagnosis)
head(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
model <- svm(CompressiveStrength~.,data=training)
model
predict <- predict(model,testing$CompressiveStrength)
predict <- predict(model,testing[,-$CompressiveStrength])
names(testing)
predict <- predict(model,testing[,-9])
table(pred=predict,true=testing[,9])
rmse <- sqrt(mean((predict-testing[,9])^2))
library(e1071)
set.seed(325)
model <- svm(CompressiveStrength~.,data=training)
predict <- predict(model,testing[,-9])
rmse <- sqrt(mean((predict-testing[,9])^2))
rmse
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lasso <- train(CompressiveStrength~.,data=training,method="lasso")
lasso.fit
plot(lasso)
lasso
typeof(lasso)
?plot.enet
typeof(lasso,xvar=c("penalty")
)
typeof(lasso,xvar=c("step"))
set.seed(233)
o1 <- emat(x,y,lambda=0)
o1 <- enet(x,y,lambda=0)
head(training)
head(training[,-9]
)
o1 <- enet(training[,-9],training[9],lambda=0)
head(training[9])
o1 <- enet(matrix(training[,-9]),training[9],lambda=0)
head(matrix(training[,-9]))
?matrix()
head(as.matrix(training[,-9]))
o1 <- enet(as.matrix(training[,-9]),training[9],lambda=0)
typeof(training[9])
typeof(complex(training[9])
)
?complex
typeof(as.complex(training[9]))
training[9]
training[9]$CompressiveStrength
o1 <- enet(as.matrix(training[,-9]),training[9]$CompressiveStrength,lambda=0)
plot(o1)
o1
plot(o1,xvar=c("step"))
print.enet(o1)
?plot.enet
plot(01)
plot(o1
)
plot(o1,xvar=c("step"))
names(training)
coef(o1)
coefficients(o1)
typeof(o1)
o1
o1$Cp
summary(o1)
o1.beta.pure
plot.enet(o1$finalModel, xvar = "penalty", use.color = TRUE)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
set.seed(233)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
getwd()
cd setwd("data science")
setwd("data science")
setwd("practical ML")
setwd("project")
list.files()
library(caret);
training_orig    <- read.csv("pml-training.csv");
training_trimmed <- training_orig[-c(1,5,6,12:36,50:59,69:83,87:101,103:112,125:139,141:150)];
set.seed(1976);
inValid           <- createDataPartition(y=training_trimmed$classe, p=0.95, list=FALSE);
validity_test_set <- training_trimmed[-inValid,];
training_set      <- training_trimmed[inValid,];
# find out how many variable pairs are highly correlated (more than 80%)
M       <- abs(cor(training_set[,-c(1,57)]));
diag(M) <- 0;
nrow(which(M > 0.8, arr.ind=T))/2;
names(training_set)
save.image("test")
save.image("test.Rdata")
rf_56vars <- train(classe~.,data=training_set, method="rf", trControl=trainControl(method="cv",number=10))
rf_56vars
rf_56vars$finalModel
save.image("test012115.RData")
res <- predict(rf_56vars,newdata="validity_test_set")
res <- predict(rf_56vars,newdata="validity_test_set[,-c(1,57)]")
head(validity_test_set,3)
head(training_set, 2)
res <- predict(rf_56vars,newdata="validity_test_set")
res <- predict(rf_56vars,newdata=validity_test_set)
head(res)
nrow(res)
(res == validity_test_set[,57])
sum(res == validity_test_set[,57])
sum(res != validity_test_set[,57])
save.image("012115_2.RData")
